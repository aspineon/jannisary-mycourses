package entities.dao;

// Generated Apr 11, 2011 11:14:09 PM by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.validator.Email;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotEmpty;
import org.hibernate.validator.Pattern;

import com.sun.faces.mgbean.ManagedBeanPreProcessingException.Type;

/**
 * TypeofCourse generated by hbm2java
 */
public class TypeofCourse implements java.io.Serializable {

	private static final long serialVersionUID = 3766846453975325388L;

	private Integer typeofCourseId;
	
    @NotEmpty
    @Length(min=3,max=50)
	private String typeofCourse;
	
	private Set courses = new HashSet(0);

	public TypeofCourse() {
	}
	
	public TypeofCourse(TypeofCourse toc){
		this.typeofCourse = toc.typeofCourse;		
	}
	
	public void addTypeofCourse(){
		Session session=null;
		try{
			
			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			session = sessionFactory.openSession();
			Transaction tx = session.beginTransaction();
			//System.out.println("Lecturer: AddLecturer1");
			Query query = session.getNamedQuery("addTypeofCourse");
			//System.out.println("Lecturer: AddLecturer2");
			query.setParameter("pTypeofCourse", typeofCourse);
			query.executeUpdate();
			tx.commit();
			//System.out.println("Lecturer: AddLecturer3");
			
		}catch(Exception e){
			System.err.print(e.getMessage());
		}
	}
	
	public void updateTypeofCourse() throws Exception{
		Session session=null;
		try{
			
			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			session = sessionFactory.openSession();
			Transaction tx = session.beginTransaction();
			Query query = session.getNamedQuery("updateTypeofCourse");
			query.setParameter("pTypeofCourseId", typeofCourseId);
			query.setParameter("pTypeofCourse", typeofCourse);			
			query.executeUpdate();
			tx.commit();
		}catch(Exception e){
			System.err.print(e.getMessage());
			throw new Exception(e);
		}
		finally{
			session.close();
		}
	}
	
	public void deleteTypeofCourse(){
		Session session=null;
		try{
			
			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			session = sessionFactory.openSession();
			Transaction tx = session.beginTransaction();
			Query query = session.getNamedQuery("deleteTypeofCourse");
			query.setParameter("pTypeofCourseId", typeofCourseId);
			query.executeUpdate();
			tx.commit();
		}catch(Exception e){
			System.err.print(e.getMessage());
		}
		finally{
			session.close();
		}
	}
	
	@SuppressWarnings("unchecked")
	public List<TypeofCourse> getAllTypeofCourses(){
		List<TypeofCourse> typeofCoursesList = null;
		Session session = null;
		
		try {
			SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
			session = sessionFactory.openSession();
			
			Query query = session.getNamedQuery("getAllTypeofCourses");
			typeofCoursesList = (List<TypeofCourse>) query.list();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.getMessage();
		} 
		return typeofCoursesList;
	}
	
	@SuppressWarnings("unchecked")
	public List<TypeofCourse> getTypeofCourseByCode(){
		List<TypeofCourse> tocList = null;
		
        Session session = null;
        
        try {
                SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
                session = sessionFactory.openSession();
                
                Query query = session.getNamedQuery("getTypeofCourseByCode");
                
                query.setParameter("pTypeofCourseCode", typeofCourse);
                tocList = (List<TypeofCourse>) query.list();
                
        } catch (Exception e) {
                // TODO: handle exception
                e.getMessage();
        } 
        return tocList;
		
	}
	
	public TypeofCourse(String typeofCourse) {
		this.typeofCourse = typeofCourse;
	}

	public TypeofCourse(String typeofCourse, Set courses) {
		this.typeofCourse = typeofCourse;
		this.courses = courses;
	}

	public Integer getTypeofCourseId() {
		return this.typeofCourseId;
	}

	public void setTypeofCourseId(Integer typeofCourseId) {
		this.typeofCourseId = typeofCourseId;
	}

	public String getTypeofCourse() {
		return this.typeofCourse;
	}

	public void setTypeofCourse(String typeofCourse) {
		this.typeofCourse = typeofCourse;
	}

	public Set getCourses() {
		return this.courses;
	}

	public void setCourses(Set courses) {
		this.courses = courses;
	}

}
